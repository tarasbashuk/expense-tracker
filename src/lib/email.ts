import nodemailer from 'nodemailer';

interface Transaction {
  id: string;
  text: string;
  amount: number;
  currency: string;
  date: Date;
  userId: string;
}

interface UserEmail {
  clerkUserId: string;
  email: string;
}

export async function sendRecurringTransactionsEmail(
  createdTransactions: Transaction[],
  userEmails: UserEmail[],
) {
  console.log('Email function called with:', {
    createdTransactionsCount: createdTransactions.length,
    userEmailsCount: userEmails.length,
    hasAppEmail: !!process.env.APP_EMAIL,
    hasAppEmailPass: !!process.env.APP_EMAIL_PASS,
  });

  if (!process.env.APP_EMAIL || !process.env.APP_EMAIL_PASS) {
    console.warn('Email configuration missing, skipping email notification');

    return;
  }

  const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: process.env.APP_EMAIL,
      pass: process.env.APP_EMAIL_PASS,
    },
  });

  // Group transactions by user
  const transactionsByUser = createdTransactions.reduce(
    (acc, transaction) => {
      if (!acc[transaction.userId]) {
        acc[transaction.userId] = [];
      }
      acc[transaction.userId].push(transaction);

      return acc;
    },
    {} as Record<string, Transaction[]>,
  );

  // Send email to each user who has created transactions
  for (const [userId, userTransactions] of Object.entries(transactionsByUser)) {
    const userEmail = userEmails.find((u) => u.clerkUserId === userId);

    if (!userEmail) {
      console.warn(`No email found for user ${userId}`);
      continue;
    }

    const emailContent = `
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Recurring Transactions</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f8f9fa;
        }
        .container {
            background: white;
            border-radius: 12px;
            padding: 30px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .header {
            text-align: center;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 2px solid #e9ecef;
        }
        .header h1 {
            color: #2c3e50;
            margin: 0;
            font-size: 28px;
        }
        .header p {
            color: #6c757d;
            margin: 10px 0 0 0;
            font-size: 16px;
        }
        .transaction-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 16px 0;
            border-bottom: 1px solid #e9ecef;
        }
        .transaction-item:last-child {
            border-bottom: none;
        }
        .transaction-text {
            flex: 1;
            margin-right: 20px;
        }
        .transaction-amount {
            font-weight: bold;
            color: #e74c3c;
            font-size: 16px;
        }
        .footer {
            text-align: center;
            margin-top: 30px;
            padding-top: 20px;
            border-top: 2px solid #e9ecef;
            color: #6c757d;
            font-size: 14px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ðŸ”„ Recurring Transactions</h1>
            <p>Your recurring transactions have been processed today</p>
        </div>

        <div style="margin-bottom: 20px;">
            <h2 style="color: #2c3e50; margin-bottom: 15px;">Created ${userTransactions.length} new transaction(s):</h2>
            
            ${userTransactions
              .map(
                (t) => `
                <div class="transaction-item">
                    <div class="transaction-text">
                        <div style="font-weight: 600; margin-bottom: 4px;">${t.text}</div>
                        <div style="color: #6c757d; font-size: 14px;">${t.date.toLocaleDateString(
                          'en-US',
                          {
                            year: 'numeric',
                            month: 'short',
                            day: 'numeric',
                          },
                        )}</div>
                    </div>
                    <div class="transaction-amount">${t.amount} ${t.currency}</div>
                </div>
            `,
              )
              .join('')}
        </div>

        <div class="footer">
            <p>Generated by TB Expense App</p>
            <p>You can view all your transactions in the app! ðŸ’°</p>
        </div>
    </div>
</body>
</html>
  `.trim();

    try {
      await transporter.sendMail({
        from: process.env.APP_EMAIL,
        to: userEmail.email,
        subject: `ðŸ”„ Your Recurring Transactions - ${new Date().toLocaleDateString()}`,
        html: emailContent,
      });

      console.log(`Recurring transactions email sent to ${userEmail.email}`);
    } catch (error) {
      console.error(`Failed to send email to ${userEmail.email}:`, error);
    }
  }
}
